version: 2

aliases:
  - &setup-cloud-sdk
    name: Setup Google Cloud SDK
    command: |
      echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
      gcloud auth configure-docker
      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      gcloud container clusters get-credentials production --zone us-east1-b

jobs:
  node-tests:
    working_directory: ~/build
    docker:
      - image: circleci/node:12
    steps:
      - checkout

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install
      - run: npx lerna bootstrap

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/build
          paths:
            - node_modules

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  setup-infra:
    docker:
      - image: hashicorp/terraform:light

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Apply terraform configuration
          working_directory: terraform
          command: |
            terraform init \
              -input=false \
              -backend-config="bucket=${TF_VAR_GCLOUD_STORAGE_BUCKET}" \
              -backend-config="credentials=${TF_VAR_GCLOUD_SERVICE_KEY}"
            terraform apply -input=false -auto-approve

  ops-deployment:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout

      - setup_remote_docker

      - run: *setup-cloud-sdk

      - run:
          name: Configure Third Party Applications
          command: |
            kubectl apply -f k8s_config/base/cert-manager/cert-manager.yaml
            kubectl apply -f k8s_config/base/nginx/mandatory.yaml
            kubectl apply -f k8s_config/base/nginx/cloud-generic.yaml
            kubectl apply -k k8s_config/overlays/production/cluster-issuer
            kubectl rollout status deployment/cert-manager --namespace cert-manager
            kubectl rollout status deployment/nginx-ingress-controller --namespace ingress-nginx

  build-backend:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout
      - setup_remote_docker
      - run: *setup-cloud-sdk

      # - run: echo 'export CLEANED_BRANCH=${CIRCLE_BRANCH//\/}' >> $BASH_ENV
      - run:
          command: |
            docker build -t "gcr.io/$GOOGLE_PROJECT_ID/backend:latest" -f packages/backend/Dockerfile .
            docker push "gcr.io/$GOOGLE_PROJECT_ID/backend:latest"

  build-frontend:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout
      - setup_remote_docker
      - run: *setup-cloud-sdk

      # - run: echo 'export CLEANED_BRANCH=${CIRCLE_BRANCH//\/}' >> $BASH_ENV
      - run:
          command: |
            docker build -t "gcr.io/$GOOGLE_PROJECT_ID/frontend:latest" -f packages/frontend/Dockerfile .
            docker push "gcr.io/$GOOGLE_PROJECT_ID/frontend:latest"

  push-and-deploy:
    docker:
      - image: google/cloud-sdk

    steps:
      # deploy the image
      - checkout
      - run: *setup-cloud-sdk
      - run: kubectl apply -k k8s_config/overlays/production/backend
      - run: kubectl rollout status deployment/backend
      - run: kubectl apply -k k8s_config/overlays/production/frontend
      - run: kubectl rollout status deployment/frontend

workflows:
  version: 2
  pull-request:
    jobs:
      # - node-tests
      - setup-infra:
          context: BITPULL_DEVELOPMENT
          # requires:
          #   - node-tests
      # - node-tests
      - ops-deployment:
          context: BITPULL_DEVELOPMENT
          requires:
            - setup-infra
      - build-backend:
          context: BITPULL_DEVELOPMENT
          requires:
            - ops-deployment
            # - node-tests
      - build-frontend:
          context: BITPULL_DEVELOPMENT
          requires:
            - ops-deployment
          #   - node-tests
      - push-and-deploy:
          context: BITPULL_DEVELOPMENT
          requires:
            - build-backend
            - build-frontend
          filters:
            branches:
              only: master
